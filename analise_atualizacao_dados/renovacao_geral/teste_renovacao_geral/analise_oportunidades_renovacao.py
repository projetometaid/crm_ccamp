#!/usr/bin/env python3
"""
AN√ÅLISE DE OPORTUNIDADES DE RENOVA√á√ÉO
Identifica clientes que precisam ser contatados para renova√ß√£o
"""

import psycopg2
from datetime import datetime, timedelta

def conectar_banco():
    """Conecta ao banco de dados"""
    return psycopg2.connect(
        host="localhost",
        port="5433",
        database="crm_ccamp",
        user="postgres",
        password="@Certificado123"
    )

def analisar_oportunidades_renovacao():
    """Analisa registros sem dados de renova√ß√£o - oportunidades de neg√≥cio"""
    print("üéØ AN√ÅLISE DE OPORTUNIDADES DE RENOVA√á√ÉO")
    print("=" * 70)
    print("üìû Clientes que PRECISAM ser contatados para renova√ß√£o")
    print("‚ö†Ô∏è Campos vazios = Oportunidades de neg√≥cio!")
    print()
    
    conn = conectar_banco()
    cursor = conn.cursor()
    
    # Total de registros
    cursor.execute("SELECT COUNT(*) FROM renovacao_geral")
    total_registros = cursor.fetchone()[0]
    
    # Registros SEM dados de renova√ß√£o (oportunidades)
    cursor.execute("""
        SELECT COUNT(*) 
        FROM renovacao_geral
        WHERE (nome_da_ar_protocolo_renovacao IS NULL OR nome_da_ar_protocolo_renovacao = '')
        AND (produto_protocolo_renovacao IS NULL OR produto_protocolo_renovacao = '')
        AND status_protocolo_renovacao = 'PENDENTE'
    """)
    
    oportunidades_total = cursor.fetchone()[0]
    
    print(f"üìä RESUMO GERAL:")
    print(f"   üìã Total de registros: {total_registros:,}")
    print(f"   üéØ Oportunidades de renova√ß√£o: {oportunidades_total:,} ({(oportunidades_total/total_registros)*100:.1f}%)")
    print(f"   ‚úÖ J√° processados: {total_registros - oportunidades_total:,} ({((total_registros - oportunidades_total)/total_registros)*100:.1f}%)")
    
    return oportunidades_total

def analisar_por_prazo_vencimento():
    """Analisa oportunidades por prazo de vencimento"""
    print(f"\n‚è∞ AN√ÅLISE POR PRAZO DE VENCIMENTO")
    print("-" * 60)
    print("üö® Prioriza√ß√£o por urg√™ncia de renova√ß√£o")
    print()
    
    conn = conectar_banco()
    cursor = conn.cursor()
    
    # Oportunidades por faixa de prazo
    cursor.execute("""
        SELECT
            CASE
                WHEN prazo <= 0 THEN 'VENCIDO'
                WHEN prazo <= 30 THEN 'CR√çTICO (‚â§30 dias)'
                WHEN prazo <= 60 THEN 'URGENTE (31-60 dias)'
                WHEN prazo <= 90 THEN 'ATEN√á√ÉO (61-90 dias)'
                WHEN prazo <= 180 THEN 'NORMAL (91-180 dias)'
                ELSE 'FUTURO (>180 dias)'
            END as faixa_prazo,
            COUNT(*) as quantidade
        FROM renovacao_geral
        WHERE (nome_da_ar_protocolo_renovacao IS NULL OR nome_da_ar_protocolo_renovacao = '')
        AND (produto_protocolo_renovacao IS NULL OR produto_protocolo_renovacao = '')
        AND status_protocolo_renovacao = 'PENDENTE'
        GROUP BY CASE
                WHEN prazo <= 0 THEN 'VENCIDO'
                WHEN prazo <= 30 THEN 'CR√çTICO (‚â§30 dias)'
                WHEN prazo <= 60 THEN 'URGENTE (31-60 dias)'
                WHEN prazo <= 90 THEN 'ATEN√á√ÉO (61-90 dias)'
                WHEN prazo <= 180 THEN 'NORMAL (91-180 dias)'
                ELSE 'FUTURO (>180 dias)'
            END
        ORDER BY
            MIN(CASE
                WHEN prazo <= 0 THEN 1
                WHEN prazo <= 30 THEN 2
                WHEN prazo <= 60 THEN 3
                WHEN prazo <= 90 THEN 4
                WHEN prazo <= 180 THEN 5
                ELSE 6
            END)
    """)
    
    faixas_prazo = cursor.fetchall()
    total_oportunidades = sum(quantidade for _, quantidade in faixas_prazo)
    
    print(f"üìä PRIORIZA√á√ÉO POR URG√äNCIA ({total_oportunidades:,} oportunidades):")
    
    for faixa, quantidade in faixas_prazo:
        pct = (quantidade / total_oportunidades) * 100
        
        if 'VENCIDO' in faixa:
            emoji = "üö®"
            prioridade = "M√ÅXIMA"
        elif 'CR√çTICO' in faixa:
            emoji = "üî¥"
            prioridade = "ALTA"
        elif 'URGENTE' in faixa:
            emoji = "üü†"
            prioridade = "M√âDIA"
        elif 'ATEN√á√ÉO' in faixa:
            emoji = "üü°"
            prioridade = "BAIXA"
        else:
            emoji = "üü¢"
            prioridade = "FUTURA"
        
        print(f"   {emoji} {faixa:20} | {quantidade:,} ({pct:.1f}%) | Prioridade: {prioridade}")
    
    conn.close()

def analisar_por_produto():
    """Analisa oportunidades por tipo de produto"""
    print(f"\nüè∑Ô∏è AN√ÅLISE POR TIPO DE PRODUTO")
    print("-" * 60)
    print("üí∞ Potencial de receita por produto")
    print()
    
    conn = conectar_banco()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT 
            produto,
            COUNT(*) as quantidade
        FROM renovacao_geral
        WHERE (nome_da_ar_protocolo_renovacao IS NULL OR nome_da_ar_protocolo_renovacao = '')
        AND (produto_protocolo_renovacao IS NULL OR produto_protocolo_renovacao = '')
        AND status_protocolo_renovacao = 'PENDENTE'
        GROUP BY produto
        ORDER BY quantidade DESC
    """)
    
    produtos = cursor.fetchall()
    total_produtos = sum(quantidade for _, quantidade in produtos)
    
    print(f"üìä OPORTUNIDADES POR PRODUTO ({total_produtos:,} total):")
    
    for produto, quantidade in produtos:
        pct = (quantidade / total_produtos) * 100
        
        # Estimar valor m√©dio por produto (valores aproximados)
        if 'e-CNPJ' in produto:
            valor_estimado = 200  # R$ 200 por e-CNPJ
            emoji = "üíº"
        elif 'e-CPF' in produto:
            valor_estimado = 100  # R$ 100 por e-CPF
            emoji = "üë§"
        else:
            valor_estimado = 150  # Valor m√©dio
            emoji = "üìÑ"
        
        receita_potencial = quantidade * valor_estimado
        
        print(f"   {emoji} {produto:25} | {quantidade:,} ({pct:.1f}%) | Potencial: R$ {receita_potencial:,.2f}")
    
    # Calcular receita total potencial
    receita_total = sum(quantidade * (200 if 'e-CNPJ' in produto else 100) 
                       for produto, quantidade in produtos)
    
    print(f"\nüí∞ RECEITA POTENCIAL TOTAL: R$ {receita_total:,.2f}")
    
    conn.close()

def analisar_por_regiao():
    """Analisa oportunidades por regi√£o (baseado no local de atendimento)"""
    print(f"\nüó∫Ô∏è AN√ÅLISE POR REGI√ÉO")
    print("-" * 60)
    print("üìç Distribui√ß√£o geogr√°fica das oportunidades")
    print()
    
    conn = conectar_banco()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT 
            CASE 
                WHEN local_de_atendimento IS NULL OR local_de_atendimento = '' THEN 'N√ÉO INFORMADO'
                ELSE local_de_atendimento
            END as regiao,
            COUNT(*) as quantidade
        FROM renovacao_geral
        WHERE (nome_da_ar_protocolo_renovacao IS NULL OR nome_da_ar_protocolo_renovacao = '')
        AND (produto_protocolo_renovacao IS NULL OR produto_protocolo_renovacao = '')
        AND status_protocolo_renovacao = 'PENDENTE'
        GROUP BY CASE 
                WHEN local_de_atendimento IS NULL OR local_de_atendimento = '' THEN 'N√ÉO INFORMADO'
                ELSE local_de_atendimento
            END
        ORDER BY quantidade DESC
        LIMIT 15
    """)
    
    regioes = cursor.fetchall()
    total_regioes = sum(quantidade for _, quantidade in regioes)
    
    print(f"üìä TOP 15 REGI√ïES COM OPORTUNIDADES ({total_regioes:,} total):")
    
    for regiao, quantidade in regioes:
        pct = (quantidade / total_regioes) * 100
        print(f"   üìç {regiao[:35]:35} | {quantidade:,} ({pct:.1f}%)")
    
    conn.close()

def gerar_lista_contatos_prioritarios():
    """Gera lista de contatos priorit√°rios para renova√ß√£o"""
    print(f"\nüìû LISTA DE CONTATOS PRIORIT√ÅRIOS")
    print("-" * 60)
    print("üéØ Clientes que devem ser contatados IMEDIATAMENTE")
    print()
    
    conn = conectar_banco()
    cursor = conn.cursor()
    
    # Buscar registros cr√≠ticos (vencidos ou vencendo em at√© 30 dias)
    cursor.execute("""
        SELECT 
            protocolo,
            razao_social,
            telefone,
            e_mail,
            produto,
            data_fim_validade,
            prazo,
            local_de_atendimento
        FROM renovacao_geral
        WHERE (nome_da_ar_protocolo_renovacao IS NULL OR nome_da_ar_protocolo_renovacao = '')
        AND (produto_protocolo_renovacao IS NULL OR produto_protocolo_renovacao = '')
        AND status_protocolo_renovacao = 'PENDENTE'
        AND prazo <= 30
        ORDER BY prazo ASC, produto DESC
        LIMIT 20
    """)
    
    contatos_prioritarios = cursor.fetchall()
    
    if contatos_prioritarios:
        print(f"üö® TOP 20 CONTATOS MAIS URGENTES:")
        print("-" * 100)
        print(f"{'Protocolo':12} | {'Raz√£o Social':25} | {'Telefone':15} | {'Produto':10} | {'Prazo':6} | {'Status':8}")
        print("-" * 100)
        
        for protocolo, razao, telefone, email, produto, data_fim, prazo, local in contatos_prioritarios:
            razao_short = razao[:25] if razao else 'N/A'
            telefone_short = telefone[:15] if telefone else 'N/A'
            produto_short = produto[:10] if produto else 'N/A'
            
            if prazo <= 0:
                status = "VENCIDO"
                emoji = "üö®"
            elif prazo <= 15:
                status = "CR√çTICO"
                emoji = "üî¥"
            else:
                status = "URGENTE"
                emoji = "üü†"
            
            print(f"{protocolo:12} | {razao_short:25} | {telefone_short:15} | {produto_short:10} | {prazo:6} | {emoji}{status}")
    else:
        print("‚úÖ Nenhum contato cr√≠tico encontrado!")
    
    conn.close()

def analisar_historico_renovacoes():
    """Analisa hist√≥rico de renova√ß√µes para identificar padr√µes"""
    print(f"\nüìà AN√ÅLISE DE PADR√ïES DE RENOVA√á√ÉO")
    print("-" * 60)
    print("üîç Identificando tend√™ncias e oportunidades")
    print()
    
    conn = conectar_banco()
    cursor = conn.cursor()
    
    # Taxa de convers√£o por status
    cursor.execute("""
        SELECT 
            status_protocolo_renovacao,
            COUNT(*) as quantidade
        FROM renovacao_geral
        GROUP BY status_protocolo_renovacao
        ORDER BY quantidade DESC
    """)
    
    status_distribuicao = cursor.fetchall()
    total_status = sum(quantidade for _, quantidade in status_distribuicao)
    
    print(f"üìä DISTRIBUI√á√ÉO POR STATUS ({total_status:,} total):")
    
    for status, quantidade in status_distribuicao:
        pct = (quantidade / total_status) * 100
        
        if status == 'EMITIDO':
            emoji = "‚úÖ"
            descricao = "Renova√ß√£o conclu√≠da"
        elif status == 'PENDENTE':
            emoji = "‚è≥"
            descricao = "Aguardando contato/renova√ß√£o"
        elif status == 'CANCELADO':
            emoji = "‚ùå"
            descricao = "Cliente cancelou"
        elif status == 'REVOGADO':
            emoji = "üö´"
            descricao = "Certificado revogado"
        else:
            emoji = "‚ùì"
            descricao = "Status indefinido"
        
        print(f"   {emoji} {status:15} | {quantidade:,} ({pct:.1f}%) | {descricao}")
    
    # Taxa de sucesso da AR Certificado Campinas
    cursor.execute("""
        SELECT 
            COUNT(CASE WHEN status_protocolo_renovacao = 'EMITIDO' THEN 1 END) as emitidos,
            COUNT(*) as total
        FROM renovacao_geral
        WHERE nome_da_ar_protocolo_renovacao = 'AR CERTIFICADO CAMPINAS'
    """)
    
    emitidos_campinas, total_campinas = cursor.fetchone()
    
    if total_campinas > 0:
        taxa_sucesso = (emitidos_campinas / total_campinas) * 100
        print(f"\nüèÜ PERFORMANCE AR CERTIFICADO CAMPINAS:")
        print(f"   ‚úÖ Taxa de sucesso: {taxa_sucesso:.1f}% ({emitidos_campinas:,}/{total_campinas:,})")
    
    conn.close()

def main():
    """Fun√ß√£o principal"""
    try:
        print("üéØ AN√ÅLISE DE OPORTUNIDADES DE RENOVA√á√ÉO")
        print("=" * 70)
        print("üíº Identificando clientes para contato comercial")
        print()
        
        # An√°lise geral de oportunidades
        total_oportunidades = analisar_oportunidades_renovacao()
        
        if total_oportunidades == 0:
            print("‚úÖ N√£o h√° oportunidades pendentes!")
            return
        
        # An√°lises espec√≠ficas
        analisar_por_prazo_vencimento()
        analisar_por_produto()
        analisar_por_regiao()
        gerar_lista_contatos_prioritarios()
        analisar_historico_renovacoes()
        
        print(f"\nüéâ AN√ÅLISE DE OPORTUNIDADES CONCLU√çDA!")
        print("=" * 50)
        print(f"üéØ {total_oportunidades:,} oportunidades identificadas")
        print(f"üìû Lista de contatos priorit√°rios gerada")
        print(f"üí∞ Potencial de receita calculado")
        print(f"üìä Estrat√©gia de abordagem definida")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
