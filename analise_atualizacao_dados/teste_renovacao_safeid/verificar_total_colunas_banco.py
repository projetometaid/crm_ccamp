#!/usr/bin/env python3
"""
VERIFICA√á√ÉO DO TOTAL DE COLUNAS NO BANCO
Conta exatamente quantas colunas existem na tabela emissao
"""

import psycopg2

def conectar_banco():
    """Conecta ao banco de dados"""
    return psycopg2.connect(
        host="localhost",
        port="5433",
        database="crm_ccamp",
        user="postgres",
        password="@Certificado123"
    )

def contar_colunas_banco():
    """Conta total de colunas na tabela emissao"""
    print("üîç CONTANDO COLUNAS NA TABELA EMISSAO")
    print("=" * 50)
    
    conn = conectar_banco()
    cursor = conn.cursor()
    
    # Contar total de colunas
    cursor.execute("""
        SELECT COUNT(*) 
        FROM information_schema.columns 
        WHERE table_name = 'emissao'
    """)
    
    total_colunas = cursor.fetchone()[0]
    print(f"üìä TOTAL DE COLUNAS NA TABELA EMISSAO: {total_colunas}")
    
    # Listar todas as colunas
    cursor.execute("""
        SELECT 
            ordinal_position,
            column_name, 
            data_type, 
            character_maximum_length,
            is_nullable
        FROM information_schema.columns 
        WHERE table_name = 'emissao' 
        ORDER BY ordinal_position
    """)
    
    colunas = cursor.fetchall()
    
    print(f"\nüìã LISTA COMPLETA DAS {len(colunas)} COLUNAS:")
    print("-" * 80)
    print(f"{'POS':<4} {'NOME DA COLUNA':<40} {'TIPO':<20} {'TAMANHO':<10} {'NULL'}")
    print("-" * 80)
    
    for pos, col_name, data_type, max_length, nullable in colunas:
        tamanho = str(max_length) if max_length else '-'
        null_ok = 'YES' if nullable == 'YES' else 'NO'
        print(f'{pos:<4} {col_name:<40} {data_type:<20} {tamanho:<10} {null_ok}')
    
    conn.close()
    
    return total_colunas, colunas

def verificar_arquivo_vs_banco():
    """Compara colunas do arquivo SafeID com banco"""
    print(f"\n\nüîç COMPARA√á√ÉO ARQUIVO SAFEID vs BANCO")
    print("=" * 50)
    
    # Colunas do arquivo SafeID (30 colunas)
    colunas_arquivo = [
        'Protocolo', 'Documento', 'Nome / Raz√£o Social', 'Autoridade de Registro Venda',
        'Data de Pagamento', 'VoucherCodigo', 'VoucherPercentual', 'VoucherValor',
        'Valor Pagamento', 'Descri√ß√£o Produto', 'Validade Certificado', 'Per√≠odo de Uso',
        'Data In√≠cio do Uso', 'Data Fim do Uso', 'Status do Certificado', 'Data de Revoga√ß√£o',
        'C√≥digo de Revoga√ß√£o', 'Descri√ß√£o da Revoga√ß√£o', 'CNPJ do parceiro', 'Nome do parceiro',
        'CPF do contador', 'Consultor comercial', 'Primeira Emiss√£o', 'C√≥digo do catalogo',
        'Data de Faturamento', 'Nome Catalogo', 'Email Titular', 'Telefone Titular',
        'Renovado', 'Status do Per√≠odo de Uso'
    ]
    
    print(f"üìÅ ARQUIVO SAFEID: {len(colunas_arquivo)} colunas")
    
    # Buscar colunas do banco
    conn = conectar_banco()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'emissao' 
        ORDER BY ordinal_position
    """)
    
    colunas_banco = [row[0] for row in cursor.fetchall()]
    
    print(f"üóÑÔ∏è BANCO EMISSAO: {len(colunas_banco)} colunas")
    
    print(f"\nüìä DIFEREN√áA: Banco tem {len(colunas_banco) - len(colunas_arquivo)} colunas a mais que o arquivo")
    
    # Verificar mapeamento poss√≠vel
    mapeamento_possivel = {
        'Protocolo': 'protocolo',
        'Documento': 'documento', 
        'Nome / Raz√£o Social': 'nome',
        'VoucherCodigo': 'vouchercodigo',
        'VoucherPercentual': 'voucherpercentual',
        'VoucherValor': 'vouchervalor',
        'Descri√ß√£o Produto': 'produto',
        'Data In√≠cio do Uso': 'data_inicio_validade',
        'Data Fim do Uso': 'data_fim_validade',
        'Status do Certificado': 'status_do_certificado',
        'Email Titular': 'e_mail_do_titular',
        'Telefone Titular': 'telefone_do_titular',
        'Per√≠odo de Uso': 'periodo_de_uso'
    }
    
    print(f"\n‚úÖ CAMPOS QUE PODEM SER MAPEADOS:")
    print("-" * 40)
    
    campos_mapeados = 0
    for arquivo_col, banco_col in mapeamento_possivel.items():
        if banco_col in colunas_banco:
            print(f"   {arquivo_col:<30} ‚Üí {banco_col}")
            campos_mapeados += 1
        else:
            print(f"   {arquivo_col:<30} ‚Üí ‚ùå {banco_col} (N√ÉO EXISTE)")
    
    print(f"\nüìä RESUMO DO MAPEAMENTO:")
    print(f"   ‚úÖ Campos mape√°veis: {campos_mapeados}")
    print(f"   ‚ùå Campos sem mapeamento: {len(colunas_arquivo) - campos_mapeados}")
    
    # Campo principal ausente
    print(f"\nüö® CAMPO PRINCIPAL AUSENTE:")
    if 'renovado' not in colunas_banco:
        print(f"   ‚ùå 'renovado' N√ÉO EXISTE no banco")
        print(f"   üîß Ser√° necess√°rio criar: ALTER TABLE emissao ADD COLUMN renovado VARCHAR(10);")
    else:
        print(f"   ‚úÖ 'renovado' EXISTE no banco")
    
    conn.close()

def main():
    """Fun√ß√£o principal"""
    print("üîç VERIFICA√á√ÉO TOTAL DE COLUNAS - BANCO vs ARQUIVO")
    print("=" * 70)
    print("üéØ Objetivo: Confirmar quantas colunas existem no banco")
    print()
    
    try:
        # Contar colunas do banco
        total_colunas, colunas_info = contar_colunas_banco()
        
        # Comparar com arquivo
        verificar_arquivo_vs_banco()
        
        print(f"\nüéØ CONCLUS√ÉO:")
        print("=" * 30)
        print(f"üóÑÔ∏è Banco tem {total_colunas} colunas")
        print(f"üìÅ Arquivo SafeID tem 30 colunas")
        print(f"üìä Diferen√ßa: {total_colunas - 30} colunas a mais no banco")
        print(f"‚úÖ Banco tem muito mais campos que o arquivo")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
