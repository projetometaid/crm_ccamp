#!/usr/bin/env python3
"""
AN√ÅLISE APENAS DO SAFEID
Analisa SOMENTE os 160 protocolos do arquivo SafeID e seus campos espec√≠ficos
"""

import psycopg2
import xlrd

def conectar_banco():
    """Conecta ao banco de dados"""
    return psycopg2.connect(
        host="localhost",
        port="5433",
        database="crm_ccamp",
        user="postgres",
        password="@Certificado123"
    )

def obter_protocolos_safeid():
    """Obt√©m APENAS os 160 protocolos do arquivo SafeID"""
    print("üìñ LENDO PROTOCOLOS DO ARQUIVO SAFEID")
    print("=" * 40)
    
    wb = xlrd.open_workbook("../renovacao_safeid/RelatorioSafeID.xls")
    sheet = wb.sheet_by_index(0)
    
    protocolos = []
    for row in range(1, sheet.nrows):  # Pular cabe√ßalho
        protocolo = str(sheet.cell_value(row, 0)).strip()  # Coluna 0 = Protocolo
        if protocolo:
            protocolos.append(int(float(protocolo)))
    
    print(f"üìä Total de protocolos SafeID: {len(protocolos)}")
    print(f"üîç Primeiro: {min(protocolos):,}")
    print(f"üîç √öltimo: {max(protocolos):,}")
    
    return protocolos

def analisar_campos_safeid_banco(protocolos_safeid):
    """Analisa APENAS os campos dos protocolos SafeID no banco"""
    print(f"\nüîç ANALISANDO CAMPOS SAFEID NO BANCO")
    print("=" * 50)
    
    conn = conectar_banco()
    cursor = conn.cursor()
    
    # Campos espec√≠ficos do SafeID que queremos analisar
    campos_safeid = [
        'protocolo', 'nome', 'documento', 'produto', 'status_do_certificado',
        'data_inicio_validade', 'data_fim_validade', 'vouchercodigo', 
        'voucherpercentual', 'vouchervalor', 'periodo_de_uso',
        'e_mail_do_titular', 'telefone_do_titular'
    ]
    
    # Verificar se campo 'renovado' existe
    cursor.execute("""
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'emissao' AND column_name = 'renovado'
    """)
    
    campo_renovado_existe = cursor.fetchone() is not None
    if campo_renovado_existe:
        campos_safeid.append('renovado')
    
    print(f"üìã CAMPOS SAFEID ANALISADOS: {len(campos_safeid)}")
    for i, campo in enumerate(campos_safeid, 1):
        status = "‚úÖ" if campo != 'renovado' or campo_renovado_existe else "‚ùå"
        print(f"   {i:2d}. {status} {campo}")
    
    if not campo_renovado_existe:
        print(f"\nüö® CAMPO 'renovado' N√ÉO EXISTE - Precisa ser criado!")
    
    # Buscar dados dos protocolos SafeID
    protocolos_str = ','.join(map(str, protocolos_safeid[:10]))  # Primeiros 10
    
    campos_select = ', '.join(campos_safeid[:-1] if not campo_renovado_existe else campos_safeid)
    
    cursor.execute(f"""
        SELECT {campos_select}
        FROM emissao 
        WHERE protocolo IN ({protocolos_str})
        ORDER BY protocolo
    """)
    
    registros = cursor.fetchall()
    
    print(f"\nüìä DADOS DOS PRIMEIROS 10 PROTOCOLOS SAFEID:")
    print("-" * 80)
    
    for i, registro in enumerate(registros, 1):
        protocolo = registro[0]
        nome = registro[1][:30] if registro[1] else 'NULL'
        produto = registro[3] if len(registro) > 3 else 'NULL'
        status = registro[4] if len(registro) > 4 else 'NULL'
        
        print(f"{i:2d}. {protocolo} | {nome} | {produto} | {status}")
    
    # Analisar campos espec√≠ficos
    print(f"\nüìä AN√ÅLISE DE CAMPOS ESPEC√çFICOS:")
    print("-" * 50)
    
    for protocolo in protocolos_safeid[:5]:  # Primeiros 5
        cursor.execute("""
            SELECT vouchercodigo, voucherpercentual, vouchervalor, periodo_de_uso
            FROM emissao WHERE protocolo = %s
        """, (protocolo,))
        
        resultado = cursor.fetchone()
        if resultado:
            voucher_cod, voucher_perc, voucher_val, periodo = resultado
            print(f"   {protocolo}: VoucherCod={voucher_cod}, VoucherPerc={voucher_perc}, Per√≠odo={periodo}")
    
    conn.close()
    
    return len(campos_safeid), campo_renovado_existe

def comparar_arquivo_vs_banco_safeid():
    """Compara APENAS os campos do SafeID: arquivo vs banco"""
    print(f"\nüîç COMPARA√á√ÉO SAFEID: ARQUIVO vs BANCO")
    print("=" * 50)
    
    # 30 colunas do arquivo SafeID
    colunas_arquivo_safeid = [
        'Protocolo', 'Documento', 'Nome / Raz√£o Social', 'Autoridade de Registro Venda',
        'Data de Pagamento', 'VoucherCodigo', 'VoucherPercentual', 'VoucherValor',
        'Valor Pagamento', 'Descri√ß√£o Produto', 'Validade Certificado', 'Per√≠odo de Uso',
        'Data In√≠cio do Uso', 'Data Fim do Uso', 'Status do Certificado', 'Data de Revoga√ß√£o',
        'C√≥digo de Revoga√ß√£o', 'Descri√ß√£o da Revoga√ß√£o', 'CNPJ do parceiro', 'Nome do parceiro',
        'CPF do contador', 'Consultor comercial', 'Primeira Emiss√£o', 'C√≥digo do catalogo',
        'Data de Faturamento', 'Nome Catalogo', 'Email Titular', 'Telefone Titular',
        'Renovado', 'Status do Per√≠odo de Uso'
    ]
    
    print(f"üìÅ ARQUIVO SAFEID: {len(colunas_arquivo_safeid)} colunas")
    
    # Mapeamento espec√≠fico para SafeID
    mapeamento_safeid = {
        'Protocolo': 'protocolo',
        'Documento': 'documento',
        'Nome / Raz√£o Social': 'nome',
        'VoucherCodigo': 'vouchercodigo',
        'VoucherPercentual': 'voucherpercentual', 
        'VoucherValor': 'vouchervalor',
        'Descri√ß√£o Produto': 'produto',
        'Per√≠odo de Uso': 'periodo_de_uso',
        'Data In√≠cio do Uso': 'data_inicio_validade',
        'Data Fim do Uso': 'data_fim_validade',
        'Status do Certificado': 'status_do_certificado',
        'Email Titular': 'e_mail_do_titular',
        'Telefone Titular': 'telefone_do_titular',
        'Renovado': 'renovado'  # Campo principal
    }
    
    conn = conectar_banco()
    cursor = conn.cursor()
    
    print(f"\n‚úÖ MAPEAMENTO SAFEID:")
    print("-" * 40)
    
    campos_mapeados = 0
    campo_principal_existe = False
    
    for arquivo_col, banco_col in mapeamento_safeid.items():
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'emissao' AND column_name = %s
        """, (banco_col,))
        
        existe = cursor.fetchone() is not None
        
        if existe:
            status = "‚úÖ"
            campos_mapeados += 1
            if banco_col == 'renovado':
                campo_principal_existe = True
        else:
            status = "‚ùå"
        
        print(f"   {status} {arquivo_col:<25} ‚Üí {banco_col}")
    
    conn.close()
    
    print(f"\nüìä RESUMO SAFEID:")
    print(f"   üìÅ Colunas no arquivo: {len(colunas_arquivo_safeid)}")
    print(f"   ‚úÖ Campos mape√°veis: {campos_mapeados}")
    print(f"   ‚ùå Campos sem mapeamento: {len(colunas_arquivo_safeid) - campos_mapeados}")
    
    if not campo_principal_existe:
        print(f"\nüö® CAMPO PRINCIPAL AUSENTE:")
        print(f"   ‚ùå 'renovado' N√ÉO EXISTE")
        print(f"   üîß A√á√ÉO: ALTER TABLE emissao ADD COLUMN renovado VARCHAR(10);")
    
    return campos_mapeados, campo_principal_existe

def main():
    """Fun√ß√£o principal"""
    print("üîç AN√ÅLISE APENAS DO SAFEID")
    print("=" * 50)
    print("üéØ Foco: SOMENTE os 160 protocolos do SafeID")
    print()
    
    try:
        # Obter protocolos do SafeID
        protocolos_safeid = obter_protocolos_safeid()
        
        # Analisar campos no banco
        total_campos, renovado_existe = analisar_campos_safeid_banco(protocolos_safeid)
        
        # Comparar arquivo vs banco
        campos_mapeados, campo_principal = comparar_arquivo_vs_banco_safeid()
        
        print(f"\nüéØ CONCLUS√ÉO SAFEID:")
        print("=" * 30)
        print(f"üìä Protocolos SafeID: {len(protocolos_safeid)}")
        print(f"üìä Campos analisados: {total_campos}")
        print(f"üìä Campos mape√°veis: {campos_mapeados}")
        print(f"üéØ Campo 'renovado': {'‚úÖ EXISTE' if renovado_existe else '‚ùå CRIAR'}")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
